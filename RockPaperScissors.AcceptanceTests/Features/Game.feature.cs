// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34011
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace RockPaperScissors.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Game")]
    public partial class GameFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Game.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Game", "As a frequent games player\r\nI\'d like to play rock, paper, scissors\r\nUsing the com" +
                    "puter", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Games that are valid")]
        [NUnit.Framework.TestCaseAttribute("human", "rock", "computer", "paper", "2", null)]
        [NUnit.Framework.TestCaseAttribute("human", "rock", "computer", "scissors", "1", null)]
        [NUnit.Framework.TestCaseAttribute("human", "rock", "computer", "rock", "0", null)]
        [NUnit.Framework.TestCaseAttribute("human", "paper", "computer", "paper", "0", null)]
        [NUnit.Framework.TestCaseAttribute("human", "paper", "computer", "scissors", "2", null)]
        [NUnit.Framework.TestCaseAttribute("human", "paper", "computer", "rock", "1", null)]
        [NUnit.Framework.TestCaseAttribute("human", "scissors", "computer", "paper", "1", null)]
        [NUnit.Framework.TestCaseAttribute("human", "scissors", "computer", "scissors", "0", null)]
        [NUnit.Framework.TestCaseAttribute("human", "scissors", "computer", "rock", "2", null)]
        [NUnit.Framework.TestCaseAttribute("computer", "rock", "computer", "paper", "2", null)]
        [NUnit.Framework.TestCaseAttribute("computer", "rock", "computer", "scissors", "1", null)]
        [NUnit.Framework.TestCaseAttribute("computer", "rock", "computer", "rock", "0", null)]
        [NUnit.Framework.TestCaseAttribute("computer", "paper", "computer", "paper", "0", null)]
        [NUnit.Framework.TestCaseAttribute("computer", "paper", "computer", "scissors", "2", null)]
        [NUnit.Framework.TestCaseAttribute("computer", "paper", "computer", "rock", "1", null)]
        [NUnit.Framework.TestCaseAttribute("computer", "scissors", "computer", "paper", "1", null)]
        [NUnit.Framework.TestCaseAttribute("computer", "scissors", "computer", "scissors", "0", null)]
        [NUnit.Framework.TestCaseAttribute("computer", "scissors", "computer", "rock", "2", null)]
        [NUnit.Framework.TestCaseAttribute("computer", "rock", "human", "paper", "2", null)]
        [NUnit.Framework.TestCaseAttribute("computer", "rock", "human", "scissors", "1", null)]
        [NUnit.Framework.TestCaseAttribute("computer", "rock", "human", "rock", "0", null)]
        [NUnit.Framework.TestCaseAttribute("computer", "paper", "human", "paper", "0", null)]
        [NUnit.Framework.TestCaseAttribute("computer", "paper", "human", "scissors", "2", null)]
        [NUnit.Framework.TestCaseAttribute("computer", "paper", "human", "rock", "1", null)]
        [NUnit.Framework.TestCaseAttribute("computer", "scissors", "human", "paper", "1", null)]
        [NUnit.Framework.TestCaseAttribute("computer", "scissors", "human", "scissors", "0", null)]
        [NUnit.Framework.TestCaseAttribute("computer", "scissors", "human", "rock", "2", null)]
        public virtual void GamesThatAreValid(string player1Type, string player1Move, string player2Type, string player2Move, string winningplayernumber, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Games that are valid", exampleTags);
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given(string.Format("I have player1 who is a \"{0}\" and plays \"{1}\" move", player1Type, player1Move), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.And(string.Format("player2 who is a \"{0}\" and plays \"{1}\" move", player2Type, player2Move), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
 testRunner.When("I play the game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
 testRunner.Then(string.Format("the winning player should be {0}", winningplayernumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Some games that are not valid")]
        [NUnit.Framework.TestCaseAttribute("human", "rock", "human", "paper", null)]
        [NUnit.Framework.TestCaseAttribute("human", "frog", "computer", "scissors", null)]
        [NUnit.Framework.TestCaseAttribute("human", "rock", "martian", "rock", null)]
        [NUnit.Framework.TestCaseAttribute("human", "rock", "computer", "spam", null)]
        [NUnit.Framework.TestCaseAttribute("human", "", "computer", "spam", null)]
        [NUnit.Framework.TestCaseAttribute("", "paper", "computer", "rock", null)]
        [NUnit.Framework.TestCaseAttribute("human", "paper", "", "paper", null)]
        [NUnit.Framework.TestCaseAttribute("", "", "", "", null)]
        public virtual void SomeGamesThatAreNotValid(string player1Type, string player1Move, string player2Type, string player2Move, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Some games that are not valid", exampleTags);
#line 43
this.ScenarioSetup(scenarioInfo);
#line 44
 testRunner.Given(string.Format("I have player1 who is a \"{0}\" and plays \"{1}\" move", player1Type, player1Move), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 45
 testRunner.And(string.Format("player2 who is a \"{0}\" and plays \"{1}\" move", player2Type, player2Move), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
 testRunner.When("I play the game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
 testRunner.Then("the response should be a bad request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
